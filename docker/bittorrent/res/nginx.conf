### Based on alpine defaults
# https://git.alpinelinux.org/aports/tree/main/nginx/nginx.conf?h=3.15-stable

# Set number of worker processes based on number of CPU cores.
worker_processes 4;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Configures default error logger.
error_log /etc/nginx/logs/error.log;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;

events {
    # The maximum number of simultaneous connections that can be opened by
    # a worker process.
    worker_connections 1024;
}

http {
    # Includes mapping of file name extensions to MIME types of responses
    # and defines the default type.
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Name servers used to resolve names of upstream servers into addresses.
    # It's also needed when using tcpsocket and udpsocket in Lua modules.
    #resolver 1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001;
    resolver  127.0.0.11 valid=30s;

    # Don't tell nginx version to the clients. Default is 'on'.
    server_tokens off;

    # Specifies the maximum accepted body size of a client request, as
    # indicated by the request header Content-Length. If the stated content
    # length is greater than this size, then the client receives the HTTP
    # error code 413. Set to 0 to disable. Default is '1m'.
    client_max_body_size 0;

    # Sendfile copies data between one FD and other from within the kernel,
    # which is more efficient than read() + write(). Default is off.
    sendfile on;

    # Causes nginx to attempt to send its HTTP response head in one packet,
    # instead of using partial frames. Default is 'off'.
    tcp_nopush on;

    # Enable gzipping of responses.
    #gzip on;

    # Set the Vary HTTP header as defined in the RFC 2616. Default is 'off'.
    gzip_vary on;

    # Helper variable for proxying websockets.
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Sets the path, format, and configuration for a buffered log write.
    access_log /etc/nginx/logs/access.log;

    # Deluge-VPN
    server {
        listen 80 default_server;
        listen [::]:80 default_server;

        charset utf-8;

        server_name _ deluge;

        location / {
            proxy_pass          http://10.81.12.2:8112/;
            proxy_set_header    Connection          "";
            proxy_set_header    Host                $host;
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto   $scheme;
            proxy_hide_header   X-Frame-Options;
            proxy_set_header    X-Frame-Options     "SAMEORIGIN";
            proxy_set_header    X-Real-IP           $remote_addr;
            proxy_read_timeout  90;
        }

        # deny access to .htaccess/.htpasswd files
        location ~ /\.ht {
            deny all;
        }
    }

    # Lidarr
    server {
        listen 80;
        listen [::]:80;

        charset utf-8;

        server_name lidarr;

        location / {
            proxy_pass          http://10.81.12.3:8686/;
            proxy_set_header    Connection          $connection_upgrade;
            proxy_set_header    Host                $host;
            proxy_set_header    Upgrade             $http_upgrade;
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto   $scheme;
            proxy_hide_header   X-Frame-Options;
            proxy_set_header    X-Frame-Options     "SAMEORIGIN";
            proxy_set_header    X-Real-IP           $remote_addr;
            proxy_read_timeout  90;
        }
    }

    # Prowlarr
    server {
        listen 80;
        listen [::]:80;

        charset utf-8;

        server_name prowlarr;

        location / {
            proxy_pass          http://10.81.12.6:9696/;
            proxy_set_header    Connection          $connection_upgrade;
            proxy_set_header    Host                $host;
            proxy_set_header    Upgrade             $http_upgrade;
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto   $scheme;
            proxy_hide_header   X-Frame-Options;
            proxy_set_header    X-Frame-Options     "SAMEORIGIN";
            proxy_set_header    X-Real-IP           $remote_addr;
            proxy_read_timeout  90;
        }
    }

    # Radarr
    server {
        listen 80;
        listen [::]:80;

        charset utf-8;

        server_name radarr;

        location / {
            proxy_pass          http://10.81.12.5:7878/;
            proxy_set_header    Connection          $connection_upgrade;
            proxy_set_header    Host                $host;
            proxy_set_header    Upgrade             $http_upgrade;
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto   $scheme;
            proxy_hide_header   X-Frame-Options;
            proxy_set_header    X-Frame-Options     "SAMEORIGIN";
            proxy_set_header    X-Real-IP           $remote_addr;
            proxy_read_timeout  90;
        }
    }

    # Sonarr
    server {
        listen 80;
        listen [::]:80;

        charset utf-8;

        server_name sonarr;

        location / {
            proxy_pass          http://10.81.12.4:8989/;
            proxy_set_header    Connection          $connection_upgrade;
            proxy_set_header    Host                $host;
            proxy_set_header    Upgrade             $http_upgrade;
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto   $scheme;
            proxy_hide_header   X-Frame-Options;
            proxy_set_header    X-Frame-Options     "SAMEORIGIN";
            proxy_set_header    X-Real-IP           $remote_addr;
            proxy_read_timeout  90;
        }
    }
}

pid /run/nginx.pid;

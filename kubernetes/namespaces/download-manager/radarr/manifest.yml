###############################################################################
# Deployment specifications for Radarr
#
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: radarr
  namespace: download-manager
  labels:
    # The name of the application
    app.kubernetes.io/name: radarr
    # The component within the architecture
    app.kubernetes.io/component: movie-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  replicas: 1
  selector:
    matchLabels:
      # The name of the application
      app.kubernetes.io/name: radarr
      # The component within the architecture
      app.kubernetes.io/component: movie-manager
      # The name of a higher level application this one is part of
      app.kubernetes.io/part-of: media-management-services
  template:
    metadata:
      labels:
        # The name of the application
        app.kubernetes.io/name: radarr
        # The component within the architecture
        app.kubernetes.io/component: movie-manager
        # The name of a higher level application this one is part of
        app.kubernetes.io/part-of: media-management-services
    spec:
      #
      # *** Pods distribution strategy ***
      #
      dnsPolicy: None
      dnsConfig:
        nameservers:
          - ${METALLB_PIHOLE_IP_ADDR}
      #
      # *** Security context ***
      #
      securityContext:
        # Ensure seccomp profile is set to docker/default or runtime/default
        seccompProfile:
          type: RuntimeDefault
      #
      # *** Containers specifications ***
      #
      containers:
        #
        # *** Radarr ***
        #
        # This fork of Sonarr aims to turn it into something like Couchpotato.
        #
        - name: radarr
          image: lscr.io/linuxserver/radarr:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 7878
              protocol: TCP
          volumeMounts:
            - name: pvc
              subPath: radarr
              mountPath: /config
            - name: nfs-downloads
              mountPath: /data
            - name: nfs-media
              mountPath: /movies
          envFrom:
            - configMapRef:
                name: shared-config
          # Ensure containers and pods have a configured security context
          securityContext:
            capabilities:
              # Prevent the admission of containers with the NET_RAW capability
              drop:
                - NET_RAW
            # Prevent containers from escalating privileges
            allowPrivilegeEscalation: false
          # Ensure each container has a configured liveness probe
          livenessProbe:
            httpGet:
              path: /system/status
              port: 7878
              scheme: HTTP
            initialDelaySeconds: 60
            timeoutSeconds: 5
            failureThreshold: 10
          # Ensure each container has a configured readiness probe
          readinessProbe:
            httpGet:
              path: /system/status
              port: 7878
              scheme: HTTP
            initialDelaySeconds: 60
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            limits:
              cpu: 1000m
              memory: 1500Mi
            requests:
              cpu: 100m
              memory: 250Mi
      #
      # *** Volume specifications ***
      #
      volumes:
        - name: pvc
          persistentVolumeClaim:
            claimName: download-manager
        - name: nfs-downloads
          nfs:
            server: ${NFS_IP_ADDR}
            path: ${NFS_DOWNLOADS_PATH}
        - name: nfs-media
          nfs:
            server: ${NFS_IP_ADDR}
            path: ${NFS_MOVIES_PATH}
###############################################################################
# Cluster IP configuration for Radarr
#
---
apiVersion: v1
kind: Service
metadata:
  name: radarr
  namespace: download-manager
  labels:
    # The name of the application
    app.kubernetes.io/name: radarr
    # The component within the architecture
    app.kubernetes.io/component: movie-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  selector:
    # The name of the application
    app.kubernetes.io/name: radarr
    # The component within the architecture
    app.kubernetes.io/component: movie-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
  type: ClusterIP
  ports:
    - name: web
      protocol: TCP
      port: 7878
###############################################################################
# Ingress route configuration for Radarr
#
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: radarr
  namespace: download-manager
  annotations:
    kubernetes.io/ingress.class: traefik-external
  labels:
    # The name of the application
    app.kubernetes.io/name: radarr
    # The component within the architecture
    app.kubernetes.io/component: movie-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  entryPoints:
    - websecure
  tls: {}
  routes:
    - match: Host(`${RADARR_DOMAIN}`)
      kind: Rule
      services:
        - name: radarr
          namespace: download-manager
          port: web

###############################################################################
# General configurations for DelugeVPN
#
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: deluge-vpn
  namespace: default
  labels:
    # The name of the application
    app.kubernetes.io/name: deluge-vpn
    # The component within the architecture
    app.kubernetes.io/component: torrent-client
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
data:
  DEBUG: 'false' # Options: true|false
  DELUGE_DAEMON_LOG_LEVEL: error # Options: info|warning|error|none|debug|trace|garbage
  DELUGE_WEB_LOG_LEVEL: error # Options: info|warning|error|none|debug|trace|garbage
  DELUGE_ENABLE_WEBUI_PASSWORD: 'no' # Options: yes|no
  ENABLE_PRIVOXY: 'yes' # Options: yes|no
  LAN_NETWORK: ${HOST_CIDR}
  NAME_SERVERS: ${METALLB_PIHOLE_IP_ADDR}
  PUID: '1000'
  PGID: '1000'
  STRICT_PORT_FORWARD: 'yes' # Options: yes|no
  UMASK: '000'
  VPN_ENABLED: 'yes' # Options: yes|no
  VPN_PROV: 'custom' # Options: pia|airvpn|custom
  VPN_CLIENT: 'wireguard' # Options: openvpn|wireguard
###############################################################################
# General configurations for Deemix
#
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: deemix
  namespace: default
  labels:
    # The name of the application
    app.kubernetes.io/name: deemix
    # The component within the architecture
    app.kubernetes.io/component: deezer-download-client
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
data:
  DEEMIX_SINGLE_USER: 'true'
  PUID: '1000'
  PGID: '1000'
  UMASK: '022'
###############################################################################
# General configurations for Radarr
#
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: radarr
  namespace: default
  labels:
    # The name of the application
    app.kubernetes.io/name: radarr
    # The component within the architecture
    app.kubernetes.io/component: movie-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
data:
  PUID: '1000'
  PGID: '1000'
  UMASK: '000'
###############################################################################
# General configurations for Sonarr
#
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sonarr
  namespace: default
  labels:
    # The name of the application
    app.kubernetes.io/name: sonarr
    # The component within the architecture
    app.kubernetes.io/component: tv-show-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
data:
  PUID: '1000'
  PGID: '1000'
  UMASK: '000'
###############################################################################
# General configurations for Overseerr
#
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: overseerr
  namespace: default
  labels:
    # The name of the application
    app.kubernetes.io/name: overseerr
    # The component within the architecture
    app.kubernetes.io/component: request-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
data:
  PUID: '1000'
  PGID: '1000'
  UMASK: '000'
###############################################################################
# General configurations for FlareSolverr
#
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: flaresolverr
  namespace: default
  labels:
    # The name of the application
    app.kubernetes.io/name: flaresolverr
    # The component within the architecture
    app.kubernetes.io/component: proxy-server
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
data:
  LOG_LEVEL: 'info'
  LOG_HTML: 'false'
  CAPTCHA_SOLVER: 'none'
  TZ: ${TIMEZONE}
###############################################################################
# General configurations for Prowlarr
#
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prowlarr
  namespace: default
  labels:
    # The name of the application
    app.kubernetes.io/name: prowlarr
    # The component within the architecture
    app.kubernetes.io/component: index-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
data:
  PUID: '1000'
  PGID: '1000'
  UMASK: '000'
###############################################################################
# Persistent volume claim configurations for Download Manager
#
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: download-manager
  namespace: default
  labels:
    # The name of the application
    app.kubernetes.io/name: download-manager
    # The component within the architecture
    app.kubernetes.io/component: media-management
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: csi-nfs-storage
  resources:
    requests:
      storage: 100Gi
###############################################################################
# Deployment specifications for Download Manager
#
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: download-manager
  namespace: default
  labels:
    # The name of the application
    app.kubernetes.io/name: download-manager
    # The component within the architecture
    app.kubernetes.io/component: media-management
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  replicas: 1
  selector:
    matchLabels:
      # The name of the application
      app.kubernetes.io/name: download-manager
      # The component within the architecture
      app.kubernetes.io/component: media-management
      # The name of a higher level application this one is part of
      app.kubernetes.io/part-of: media-management-services
  template:
    metadata:
      labels:
        # The name of the application
        app.kubernetes.io/name: download-manager
        # The component within the architecture
        app.kubernetes.io/component: media-management
        # The name of a higher level application this one is part of
        app.kubernetes.io/part-of: media-management-services
    spec:
      #
      # *** Pods distribution strategy ***
      #
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: "kubernetes.io/arch"
                  operator: In
                  values:
                    - amd64
      #
      # *** Containers specifications ***
      #
      containers:
        #
        # *** Deluge VPN ***
        #
        # Deluge is a full-featured â€‹BitTorrent client for Linux, OS X, Unix
        # and Windows.
        #
        # This Docker includes OpenVPN and WireGuard to ensure a secure and
        # private connection to the Internet, including use of iptables to
        # prevent IP leakage when the tunnel is down. It also includes Privoxy
        # to allow unfiltered access to index sites.
        #
        - name: deluge-vpn
          image: binhex/arch-delugevpn:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8112
              protocol: TCP
          volumeMounts:
            # - name: wireguard
            #   subPath: wireguard/peer_DelugeVPN/peer_DelugeVPN.conf
            #   mountPath: /config/wireguard/wg0.conf
            #   readOnly: true
            - name: pvc
              subPath: deluge-vpn
              mountPath: /config
            - name: nfs-downloads
              mountPath: /data
            - name: localtime
              mountPath: /etc/localtime
              readOnly: true
          envFrom:
            - configMapRef:
                name: deluge-vpn
          securityContext:
            # privileged: true
            capabilities:
              add:
                - NET_ADMIN
        #
        # *** Deemix ***
        #
        # deemix (lowercase) is a barebone deezer downloader library built from
        # the ashes of Deezloader Remix
        #
        - name: deemix
          image: registry.gitlab.com/bockiii/deemix-docker
          imagePullPolicy: Always
          ports:
            - containerPort: 6595
              protocol: TCP
          volumeMounts:
            - name: pvc
              subPath: deemix
              mountPath: /config
            - name: nfs-deemix
              mountPath: /downloads
          envFrom:
            - configMapRef:
                name: deemix
        #
        # *** Radarr ***
        #
        # This fork of Sonarr aims to turn it into something like Couchpotato.
        #
        - name: radarr-1080p
          image: binhex/arch-radarr:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 7878
              hostPort: 7878
              protocol: TCP
          volumeMounts:
            - name: nfs-downloads
              mountPath: /data
              readOnly: true
            - name: nfs-media
              mountPath: /media
              readOnly: true
            - name: pvc
              subPath: radarr-1080p
              mountPath: /config
            - name: localtime
              mountPath: /etc/localtime
              readOnly: true
          envFrom:
            - configMapRef:
                name: radarr
        - name: radarr-4k
          image: binhex/arch-radarr:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 7878
              hostPort: 7879
              protocol: TCP
          volumeMounts:
            - name: nfs-downloads
              mountPath: /data
              readOnly: true
            - name: nfs-media
              mountPath: /media
              readOnly: true
            - name: pvc
              subPath: radarr-4k
              mountPath: /config
            - name: localtime
              mountPath: /etc/localtime
              readOnly: true
          envFrom:
            - configMapRef:
                name: radarr
        #
        # *** Sonarr ***
        #
        # Sonarr is a PVR for Usenet and BitTorrent users. It can monitor
        # multiple RSS feeds for new episodes of your favorite shows and will
        # grab, sort and rename them. It can also be configured to
        # automatically upgrade the quality of files already downloaded when a
        # better quality format becomes available.
        #
        - name: sonarr-tv
          image: binhex/arch-sonarr:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8989
              hostPort: 8989
              protocol: TCP
          volumeMounts:
            - name: nfs-downloads
              mountPath: /data
              readOnly: true
            - name: nfs-media
              mountPath: /media
              readOnly: true
            - name: pvc
              subPath: sonarr-tv
              mountPath: /config
            - name: localtime
              mountPath: /etc/localtime
              readOnly: true
          envFrom:
            - configMapRef:
                name: sonarr
        - name: sonarr-anime
          image: binhex/arch-sonarr:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8989
              hostPort: 8990
              protocol: TCP
          volumeMounts:
            - name: nfs-downloads
              mountPath: /data
              readOnly: true
            - name: nfs-media
              mountPath: /media
              readOnly: true
            - name: pvc
              subPath: sonarr-anime
              mountPath: /config
            - name: localtime
              mountPath: /etc/localtime
              readOnly: true
          envFrom:
            - configMapRef:
                name: sonarr
        #
        # *** Overseerr ***
        #
        # Overseerr is a request management and media discovery tool built to
        # work with your existing Plex ecosystem. Overseerr helps you find
        # media you want to watch. With inline recommendations and
        # suggestions, you will find yourself deeper and deeper in a rabbit
        # hole of content you never knew you just had to have.
        #
        - name: overseerr
          image: binhex/arch-overseerr:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 5055
              protocol: TCP
          volumeMounts:
            - name: pvc
              subPath: overseerr
              mountPath: /config
            - name: localtime
              mountPath: /etc/localtime
              readOnly: true
          envFrom:
            - configMapRef:
                name: overseerr
        #
        # *** FlareSolverr ***
        #
        # FlareSolverr is a proxy server to bypass Cloudflare and DDoS-GUARD
        # protection.
        #
        - name: flaresolverr
          image: flaresolverr/flaresolverr:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8191
              protocol: TCP
          envFrom:
            - configMapRef:
                name: flaresolverr
        #
        # *** Prowlarr ***
        #
        # Prowlarr is a indexer manager/proxy built on the popular arr
        # .net/reactjs base stack to integrate with your various PVR apps.
        # Prowlarr supports both Torrent Trackers and Usenet Indexers. It
        # integrates seamlessly with Sonarr, Radarr, Lidarr, and Readarr
        # offering complete management of your indexers with no per app Indexer
        # setup required (we do it all).
        #
        - name: prowlarr
          image: binhex/arch-prowlarr:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 9696
              protocol: TCP
          volumeMounts:
            - name: pvc
              subPath: prowlarr
              mountPath: /config
            - name: localtime
              mountPath: /etc/localtime
              readOnly: true
          envFrom:
            - configMapRef:
                name: prowlarr
      #
      # *** Volume specifications ***
      #
      volumes:
        # - name: wireguard
        #   persistentVolumeClaim:
        #     claimName: virtual-private-network
        - name: pvc
          persistentVolumeClaim:
            claimName: download-manager
        - name: nfs-downloads
          nfs:
            server: ${NFS_IP_ADDR}
            path: ${NFS_DOWNLOADS_PATH}
        - name: nfs-deemix
          nfs:
            server: ${NFS_IP_ADDR}
            path: ${NFS_DEEMIX_PATH}
        - name: nfs-media
          nfs:
            server: ${NFS_IP_ADDR}
            path: ${NFS_MEDIA_PATH}
        - name: localtime
          hostPath:
            path: /etc/localtime
###############################################################################
# Cluster IP configuration for DelugeVPN
#
---
apiVersion: v1
kind: Service
metadata:
  name: deluge-vpn
  namespace: default
  labels:
    # The name of the application
    app.kubernetes.io/name: deluge-vpn
    # The component within the architecture
    app.kubernetes.io/component: torrent-client
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  selector:
    # The name of the application
    app.kubernetes.io/name: download-manager
    # The component within the architecture
    app.kubernetes.io/component: media-management
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
  type: ClusterIP
  ports:
    - name: web
      protocol: TCP
      port: 8112
###############################################################################
# Cluster IP configuration for Deemix
#
---
apiVersion: v1
kind: Service
metadata:
  name: deemix
  namespace: default
  labels:
    # The name of the application
    app.kubernetes.io/name: deemix
    # The component within the architecture
    app.kubernetes.io/component: deezer-download-client
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  selector:
    # The name of the application
    app.kubernetes.io/name: download-manager
    # The component within the architecture
    app.kubernetes.io/component: media-management
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
  type: ClusterIP
  ports:
    - name: web
      protocol: TCP
      port: 6595
###############################################################################
# Cluster IP configuration for Radarr (1080p)
#
---
apiVersion: v1
kind: Service
metadata:
  name: radarr-1080p
  namespace: default
  labels:
    # The name of the application
    app.kubernetes.io/name: radarr
    # The component within the architecture
    app.kubernetes.io/component: movie-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  selector:
    # The name of the application
    app.kubernetes.io/name: download-manager
    # The component within the architecture
    app.kubernetes.io/component: media-management
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
  type: ClusterIP
  ports:
    - name: web
      protocol: TCP
      port: 7878
###############################################################################
# Cluster IP configuration for Radarr (4K)
#
---
apiVersion: v1
kind: Service
metadata:
  name: radarr-4k
  namespace: default
  labels:
    # The name of the application
    app.kubernetes.io/name: radarr
    # The component within the architecture
    app.kubernetes.io/component: movie-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  selector:
    # The name of the application
    app.kubernetes.io/name: download-manager
    # The component within the architecture
    app.kubernetes.io/component: media-management
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
  type: ClusterIP
  ports:
    - name: web
      protocol: TCP
      port: 7879
###############################################################################
# Cluster IP configuration for Sonarr (TV Shows)
#
---
apiVersion: v1
kind: Service
metadata:
  name: sonarr-tv
  namespace: default
  labels:
    # The name of the application
    app.kubernetes.io/name: sonarr
    # The component within the architecture
    app.kubernetes.io/component: tv-show-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  selector:
    # The name of the application
    app.kubernetes.io/name: download-manager
    # The component within the architecture
    app.kubernetes.io/component: media-management
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
  type: ClusterIP
  ports:
    - name: web
      protocol: TCP
      port: 8989
###############################################################################
# Cluster IP configuration for Sonarr (Anime)
#
---
apiVersion: v1
kind: Service
metadata:
  name: sonarr-anime
  namespace: default
  labels:
    # The name of the application
    app.kubernetes.io/name: sonarr
    # The component within the architecture
    app.kubernetes.io/component: tv-show-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  selector:
    # The name of the application
    app.kubernetes.io/name: download-manager
    # The component within the architecture
    app.kubernetes.io/component: media-management
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
  type: ClusterIP
  ports:
    - name: web
      protocol: TCP
      port: 8990
###############################################################################
# Cluster IP configuration for Overseerr
#
---
apiVersion: v1
kind: Service
metadata:
  name: overseerr
  namespace: default
  labels:
    # The name of the application
    app.kubernetes.io/name: overseerr
    # The component within the architecture
    app.kubernetes.io/component: request-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  selector:
    # The name of the application
    app.kubernetes.io/name: download-manager
    # The component within the architecture
    app.kubernetes.io/component: media-management
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
  type: ClusterIP
  ports:
    - name: web
      protocol: TCP
      port: 5055
###############################################################################
# Cluster IP configuration for Flaresolverr
#
---
apiVersion: v1
kind: Service
metadata:
  name: flaresolverr
  namespace: default
  labels:
    # The name of the application
    app.kubernetes.io/name: flaresolverr
    # The component within the architecture
    app.kubernetes.io/component: proxy-server
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  selector:
    # The name of the application
    app.kubernetes.io/name: download-manager
    # The component within the architecture
    app.kubernetes.io/component: media-management
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
  type: ClusterIP
  ports:
    - name: web
      protocol: TCP
      port: 8191
###############################################################################
# Cluster IP configuration for Prowlarr
#
---
apiVersion: v1
kind: Service
metadata:
  name: prowlarr
  namespace: default
  labels:
    # The name of the application
    app.kubernetes.io/name: prowlarr
    # The component within the architecture
    app.kubernetes.io/component: index-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  selector:
    # The name of the application
    app.kubernetes.io/name: download-manager
    # The component within the architecture
    app.kubernetes.io/component: media-management
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
  type: ClusterIP
  ports:
    - name: web
      protocol: TCP
      port: 9696
###############################################################################
# Ingress route configuration for DelugeVPN
#
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: deluge-vpn
  namespace: default
  annotations:
    kubernetes.io/ingress.class: traefik-external
  labels:
    # The name of the application
    app.kubernetes.io/name: deluge-vpn
    # The component within the architecture
    app.kubernetes.io/component: torrent-client
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  entryPoints:
    - websecure
  tls: {}
  routes:
    - match: Host(`${DELUGE_VPN_DOMAIN}`)
      kind: Rule
      services:
        - name: deluge-vpn
          namespace: default
          port: web
###############################################################################
# Ingress route configuration for Deemix
#
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: deemix
  namespace: default
  annotations:
    kubernetes.io/ingress.class: traefik-external
  labels:
    # The name of the application
    app.kubernetes.io/name: deemix
    # The component within the architecture
    app.kubernetes.io/component: deezer-download-client
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  entryPoints:
    - websecure
  tls: {}
  routes:
    - match: Host(`${DEEMIX_DOMAIN}`)
      kind: Rule
      services:
        - name: deemix
          namespace: default
          port: web
###############################################################################
# Ingress route configuration for Radarr (1080p)
#
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: radarr-1080p
  namespace: default
  annotations:
    kubernetes.io/ingress.class: traefik-external
  labels:
    # The name of the application
    app.kubernetes.io/name: radarr
    # The component within the architecture
    app.kubernetes.io/component: movie-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  entryPoints:
    - websecure
  tls: {}
  routes:
    - match: Host(`${RADARR_1080P_DOMAIN}`)
      kind: Rule
      services:
        - name: radarr-1080p
          namespace: default
          port: web
###############################################################################
# Ingress route configuration for Radarr (4K)
#
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: radarr-4k
  namespace: default
  annotations:
    kubernetes.io/ingress.class: traefik-external
  labels:
    # The name of the application
    app.kubernetes.io/name: radarr
    # The component within the architecture
    app.kubernetes.io/component: movie-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  entryPoints:
    - websecure
  tls: {}
  routes:
    - match: Host(`${RADARR_4K_DOMAIN}`)
      kind: Rule
      services:
        - name: radarr-4k
          namespace: default
          port: web
###############################################################################
# Ingress route configuration for Sonarr (TV Shows)
#
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: sonarr-tv
  namespace: default
  annotations:
    kubernetes.io/ingress.class: traefik-external
  labels:
    # The name of the application
    app.kubernetes.io/name: sonarr
    # The component within the architecture
    app.kubernetes.io/component: tv-show-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  entryPoints:
    - websecure
  tls: {}
  routes:
    - match: Host(`${SONARR_TV_DOMAIN}`)
      kind: Rule
      services:
        - name: sonarr-tv
          namespace: default
          port: web
###############################################################################
# Ingress route configuration for Sonarr (Anime)
#
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: sonarr-anime
  namespace: default
  annotations:
    kubernetes.io/ingress.class: traefik-external
  labels:
    # The name of the application
    app.kubernetes.io/name: sonarr
    # The component within the architecture
    app.kubernetes.io/component: tv-show-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  entryPoints:
    - websecure
  tls: {}
  routes:
    - match: Host(`${SONARR_ANIME_DOMAIN}`)
      kind: Rule
      services:
        - name: sonarr-anime
          namespace: default
          port: web
###############################################################################
# Ingress route configuration for Overseerr
#
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: overseerr
  namespace: default
  annotations:
    kubernetes.io/ingress.class: traefik-external
  labels:
    # The name of the application
    app.kubernetes.io/name: overseerr
    # The component within the architecture
    app.kubernetes.io/component: request-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  entryPoints:
    - websecure
  tls: {}
  routes:
    - match: Host(`${OVERSEERR_DOMAIN}`)
      kind: Rule
      services:
        - name: overseerr
          namespace: default
          port: web
###############################################################################
# Ingress route configuration for Flaresolverr
#
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: flaresolverr
  namespace: default
  annotations:
    kubernetes.io/ingress.class: traefik-external
  labels:
    # The name of the application
    app.kubernetes.io/name: flaresolverr
    # The component within the architecture
    app.kubernetes.io/component: proxy-server
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  entryPoints:
    - websecure
  tls: {}
  routes:
    - match: Host(`${FLAMESOLVERR_DOMAIN}`)
      kind: Rule
      services:
        - name: flaresolverr
          namespace: default
          port: web
###############################################################################
# Ingress route configuration for Prowlarr
#
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: prowlarr
  namespace: default
  annotations:
    kubernetes.io/ingress.class: traefik-external
  labels:
    # The name of the application
    app.kubernetes.io/name: prowlarr
    # The component within the architecture
    app.kubernetes.io/component: index-manager
    # The name of a higher level application this one is part of
    app.kubernetes.io/part-of: media-management-services
spec:
  entryPoints:
    - websecure
  tls: {}
  routes:
    - match: Host(`${PROWLARR_DOMAIN}`)
      kind: Rule
      services:
        - name: prowlarr
          namespace: default
          port: web
